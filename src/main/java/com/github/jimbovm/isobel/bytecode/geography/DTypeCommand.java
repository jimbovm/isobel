/* SPDX-License-Identifier: MIT-0

Copyright 2022-2024 Jimbo Brierley.

Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to 
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
of the Software, and to permit persons to whom the Software is furnished to do 
so.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
SOFTWARE. */

package com.github.jimbovm.isobel.bytecode.geography;

import com.github.jimbovm.isobel.actor.PageSkip;
import com.github.jimbovm.isobel.actor.geography.FixedStatic;
import com.github.jimbovm.isobel.actor.geography.GeographyActor;
import com.github.jimbovm.isobel.bytecode.common.CommandUtils;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**
 * Collects functionality for working with D-type commands, which may
 * either set the page counter or spawn miscellaneous actors. The link
 * between most of the actors spawned by these commands is that the 
 * game engine spawns secondary actors internally when executing 
 * their behaviour.
 */
public final class DTypeCommand {

	// non-instantiable
	private DTypeCommand() {}
	
	/**
	 * The types of actor spawnable by a D-type geography command.
	 */
	@Getter
	@AllArgsConstructor
	public enum ActorId {
		/** The three-way pipe seen in the interlude area before 1-2 in
		 * the original. Increments the level counter internally without
		 * changing the value seen by the player when entered. */
		TEE_PIPE (0),
		/** The end-of-level flagpole. Increments the level counter. */
		FLAGPOLE (1),
		/** The axe seen in castle levels. Increments the world counter. */
		AXE (2),
		/** The chain seen next to the axe and bridge in castle levels. */
		CHAIN (3),
		/** The bridge on which all Bowser fights take place in the
		 * original. */
		BOWSER_BRIDGE (4),
		/** The scroll lock actor used with warp zones. */
		WARP_SCROLL_LOCK (5),
		/** @deprecated Does not appear to be used in the original game. */
		@Deprecated SCROLL_LOCK_6 (6),
		/** The generic scroll lock actor, used in underground bonus
		 * rooms in the original. */
		SCROLL_LOCK (7),
		/** Spawns infinite flying red Cheep-Cheeps. */
		INFINITE_FLYING_CHEEP_GENERATOR (8),
		/** Spawns infinite swimming Cheep-Cheeps underwater, and infinite Bullet Bills elsewhere. */
		INFINITE_BULLET_BILL_GENERATOR (9),
		/** "Off switch" for infinite enemy generators, plus "back off" command for Lakitu. */
		STOP_INFINITE_GENERATOR (0xA),
		/** Loop the player back four pages, unless the game engine determines otherwise. */
		LOOP (0xB);

		private final int id;
	}

	private static FixedStatic parseFixedStatic(final int x, final int highByte) {
		
		FixedStatic parsed = new FixedStatic();
		parsed.setX(x);
		parsed.setType(FixedStatic.Type.of(highByte & 0b00001111));

		return parsed;
	}

	/**
	 * Parse an D-type geography command and return an actor object.
	 * 
	 * @param lowByte The low byte of the command.
	 * @param highByte The high byte of the command.
	 * @param page The number of 16-block pages from the origin to offset the X and Y coordinates in the command.
	 * @return A {@link com.github.jimbovm.isobel.actor.geography.GeographyActor} parsed from the input.
	 */
	public static GeographyActor parse(final int lowByte, final int highByte, final int page) {

		final int x = (lowByte & 0xF0) >>> 4;

		GeographyActor parsed = parseFixedStatic(x + page * 16, highByte);

		return parsed;
	}
	
	/**
	 * Unparse a {@link FixedStatic} object to bytecode.
	 * 
	 * @param fixedStatic The object to unparse.
	 * @param newPage Whether to set the new page flag in the generated bytecode.
	 * @return A two-byte array of bytecode recognisable by the original game.
	 */
	public static byte[] unparse(FixedStatic fixedStatic, boolean newPage) {
		byte[] bytecode = new byte[2];

		bytecode[0] |= 0xD;
		bytecode[0] = CommandUtils.encodeCoordinates(bytecode[0], fixedStatic.getX());
		bytecode[1] = CommandUtils.encodeNewPage(bytecode[1], newPage);
		// set flag for actor spawner
		bytecode[1] |= 0b0100_0000;
		bytecode[1] |= fixedStatic.getType().getId();

		return bytecode;
	}

	/**
	 * Unparse a {@link PageSkip} object to geography bytecode.
	 * 
	 * @param skip The object to unparse.
	 * @param newPage Whether to set the new page flag in the generated bytecode.
	 * @return A two-byte array of bytecode recognisable by the original game.
	 */
	public static byte[] unparse(PageSkip skip, boolean newPage) {
		byte[] bytecode = new byte[2];

		bytecode[0] |= 0xD;
		bytecode[0] |= CommandUtils.encodeCoordinates(bytecode[0], skip.getX());
		bytecode[1] = CommandUtils.encodeNewPage(bytecode[1], newPage);
		bytecode[1] |= (skip.getTarget() & 0b00111111);

		return bytecode;
	}
}
