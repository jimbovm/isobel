/* SPDX-License-Identifier: MIT-0

Copyright 2022-2024 Jimbo Brierley.

Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to 
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
of the Software, and to permit persons to whom the Software is furnished to do 
so.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
SOFTWARE. */

package com.github.jimbovm.isobel.actor.geography;

import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlType;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import com.github.jimbovm.isobel.actor.Extensible;
import com.github.jimbovm.isobel.actor.YPlaceable;
import com.github.jimbovm.isobel.bytecode.geography.NormalCommand;

/**
 * This bean represents columns of bricks or blocks which are vertically 
 * extensible. They extend downwards from the position at which they are 
 * placed.
 */
@Getter
@Setter
@ToString
@XmlAccessorType(XmlAccessType.NONE)
@XmlRootElement(name = "column")
public final class Column extends GeographyActor implements YPlaceable, Extensible {

	/**
	 * The kind of object that the column consists of.
	 * Note that columns of bricks are rendered as coral in underwater areas.
	 */
	@XmlType(name = "columnType")
	@XmlEnum
	@Getter
	@AllArgsConstructor
	public enum Type {
		/** Column of bricks, or coral in underwater areas. */
		BRICK (5),
		/** Column of metal blocks. */
		BLOCK (6);

		private final int id;
	}

	/**
	 * Create a new column bean.
	 * 
	 * @param x The X position of the column.
	 * @param y The Y position of the column.
	 * @param type The type of object that the column consists of.
	 * @param extent The downward vertical extent of the column.
	 * @return A new column bean with the supplied parameters.
	 */
	public static Column create(final int x, final int y, Column.Type type, final int extent) {
		var column = new Column();
		column.setX(x);
		column.setY(y);
		column.setType(type);
		column.setExtent(extent);
		return column;
	}

	@XmlAttribute(name = "y")
	@Min(0) @Max(11) private int y;

	@XmlAttribute(name = "extent")
	@Min(0) @Max(0xB) private int extent;

	@XmlAttribute(name = "type")
	private Type type;

	/**
	 * Unparse the bean to its in-game bytecode equivalent.
	 * 
	 * @param newPage Whether to set the new page flag in the generated bytecode. 
	 */
	public byte[] unparse(boolean newPage) {
		return NormalCommand.unparse(this, newPage);
	}
}
