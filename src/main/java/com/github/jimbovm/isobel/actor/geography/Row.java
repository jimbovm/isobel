/* SPDX-License-Identifier: MIT-0

Copyright 2022-2024 Jimbo Brierley.

Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to 
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
of the Software, and to permit persons to whom the Software is furnished to do 
so.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
SOFTWARE. */

package com.github.jimbovm.isobel.actor.geography;

import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlType;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

import com.github.jimbovm.isobel.actor.Extensible;
import com.github.jimbovm.isobel.actor.YPlaceable;
import com.github.jimbovm.isobel.bytecode.geography.NormalCommand;

/**
 * This bean represents rows of bricks or blocks which are horizontally extensible.
 */
@Getter
@Setter
@ToString
@XmlAccessorType(XmlAccessType.NONE)
@XmlRootElement(name = "row")
public final class Row extends GeographyActor implements YPlaceable, Extensible {

	/** The kind of object that the row consists of. */
	@XmlType(name = "rowType")
	@XmlEnum
	@Getter
	@AllArgsConstructor
	public enum Type {
		/** Row of brick blocks. */
		BRICK (2),
		/** Row of solid blocks. */
		BLOCK (3),
		/** Row of coins. */
		COIN (4);

		private final int id;
	}

	/**
	 * Create a new row bean.
	 * 
	 * @param x The X position of the row.
	 * @param y The Y position of the row.
	 * @param type The type of object that the row consists of.
	 * @param extent The rightward horizontal extent of the row.
	 * @return A new row bean with the supplied parameters.
	 */
	public static Row create(final int x, final int y, Row.Type type, final int extent) {
		var row = new Row();
		row.setX(x);
		row.setY(y);
		row.setType(type);
		row.setExtent(extent);
		return row;
	}

	@XmlAttribute(name = "y")
	@Min(0) @Max(0xB) int y;

	@XmlAttribute(name = "extent")
	@Min(0) @Max(15) int extent;

	@XmlAttribute(name = "type")
	@NotNull Type type;

	/**
	 * Unparse the bean to its in-game bytecode equivalent.
	 * 
	 * @param newPage Whether to set the new page flag in the generated bytecode. 
	 */
	public byte[] unparse(final boolean newPage) {
		return NormalCommand.unparse(this, newPage);
	}
}
