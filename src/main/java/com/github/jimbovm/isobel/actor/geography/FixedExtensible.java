/* SPDX-License-Identifier: MIT-0

Copyright 2022-2024 Jimbo Brierley.

Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to 
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
of the Software, and to permit persons to whom the Software is furnished to do 
so.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
SOFTWARE. */

package com.github.jimbovm.isobel.actor.geography;

import java.util.HashMap;
import java.util.Map;

import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlType;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import com.github.jimbovm.isobel.actor.Extensible;
import com.github.jimbovm.isobel.bytecode.geography.CTypeCommand;
import com.github.jimbovm.isobel.bytecode.geography.CTypeCommand.ActorId;

/**
 * This bean represents extensible actors with preset fixed Y position
 * and variable extent along the X axis. All of these actors are
 * spawned using C-type geography commands.
 */
@Getter
@Setter
@ToString
@XmlAccessorType(XmlAccessType.NONE)
@XmlRootElement(name = "fixedExtensible")
public final class FixedExtensible extends GeographyActor implements Extensible {

	/** The type of object to be spawned by the actor. */
	@Getter
	@AllArgsConstructor
	@XmlType(name = "fixedExtensibleType")
	@XmlEnum
	public enum Type {
		/** Removes the bottom two floor blocks, irrespective
		 * of terrain fill. */
		PIT (ActorId.PIT.getId()),
		/** The horizontal part of the ropes of a scale lift. */
		HORIZONTAL_SCALE_ROPE (ActorId.HORIZONTAL_SCALE_ROPE.getId()),
		/** A bridge at Y position 7. */
		BRIDGE_Y7 (ActorId.BRIDGE_Y7.getId()),
		/** A bridge at Y position 8. */
		BRIDGE_Y8 (ActorId.BRIDGE_Y8.getId()),
		/** A bridge at Y position 10. */
		BRIDGE_Y10 (ActorId.BRIDGE_Y10.getId()),
		/** Removes the bottom two floor blocks and fills the
		 *  space with water or lava, irrespective of terrain
		 *  fill. */
		POOL (ActorId.POOL.getId()),
		/** A row of question blocks containing coins at Y
		 * position 3. */
		QUESTION_BLOCK_RUN_Y3 (ActorId.QUESTION_BLOCK_RUN_Y3.getId()),
		/** A row of question blocks containing coins at Y
		 * position 7. */
		QUESTION_BLOCK_RUN_Y7 (ActorId.QUESTION_BLOCK_RUN_Y7.getId());

		private final int id;
		
		private static Map<Integer, Type> map = new HashMap<>();

		static {
			for (Type type : Type.values())
				map.put(type.id, type);
		}
		
		/**
		 * Return a type value for a given ID.
		 * 
		 * @param id A numerical type ID.
		 * @return The type value associated with the supplied id.
		 */
		public static Type of(int id) { return map.get(id); }
	}

	@XmlAttribute(name = "extent")
	@Min(0) @Max(15) private int extent;

	@XmlAttribute(name = "type")
	@NotNull private Type type;

	/**
	 * Create a new <code>FixedExtensible</code> bean. 
	 * 
	 * @param x The X position of the object.
	 * @param type The type of the object.
	 * @param extent The extent of the object.
	 * @return A new instance of <code>FixedExtensible</code> with the given parameters.
	 */
	public static FixedExtensible create(final int x, Type type, final int extent) {
		var extensible = new FixedExtensible();
		extensible.setX(x);
		extensible.setExtent(extent);
		extensible.setType(type);
		return extensible; 
	}

	/**
	 * Unparse the bean to its in-game bytecode equivalent.
	 * 
	 * @param newPage Whether to set the new page flag in the generated bytecode. 
	 */
	public byte[] unparse(final boolean newPage) {
		return CTypeCommand.unparse(this, newPage);
	}
}
