/* SPDX-License-Identifier: MIT-0

Copyright 2022-2024 Jimbo Brierley.

Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to 
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
of the Software, and to permit persons to whom the Software is furnished to do 
so.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
SOFTWARE. */

package com.github.jimbovm.isobel.actor.population;

import com.github.jimbovm.isobel.bytecode.population.PopulationCommand;
import com.github.jimbovm.isobel.common.Atlas;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotEmpty;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlRootElement;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

/**
 * Exit pointers instruct the game to point all exits (from enterable
 * pipes and from vines) in an area to the area specified by the
 * pointer, from their X position forward unless and until overridden
 * by another exit pointer.
 *
 * All exit pointers have an "active from world N" value, where N is
 * the lowest the world counter can be for the pointer to be in effect
 * when a given area is loaded. If the current world value is less
 * than N, the pointer is ignored. Using this value carefully is
 * required to return the player to the correct area when reusing
 * subareas between levels.
 */
@Getter
@Setter
@NoArgsConstructor
@ToString
@XmlAccessorType(XmlAccessType.NONE)
@XmlRootElement(name = "exitPointer")
public final class ExitPointer extends PopulationActor {

	/* We use a string representing an area ID, rather than an area object 
	 * itself, because during parsing we need to read exit pointers for 
	 * areas that have not been read yet.
	 */
	/** The immutable ID of an area object. */
	@XmlAttribute(name = "destination")
	@NotEmpty private String destination;

	/** The page of the destination area on which to start the player. */
	@XmlAttribute(name = "startPage")
	@Min(0) private int startPage;

	/** The zero-based world number from which the pointer is active. */
	@XmlAttribute(name = "activeFromWorld")
	@Min(0) @Max(7) private int activeFromWorld;

	/**
	 * Create a new ExitPointer object.
	 * 
	 * @param x The X position of the exit pointer.
	 * @param destination The ID of the area to which the pointer should point.
	 * @param startPage The page on which to spawn the player in the destination area.
	 * @param activeFromWorld The minimum world from which the exit pointer is in effect.
	 * @return An ExitPointer with the given parameters.
	 */
	public static ExitPointer create(final int x, final String destination, final int startPage, final int activeFromWorld) {
		var pointer = new ExitPointer();
		pointer.setX(x);
		pointer.setDestination(destination);
		pointer.setStartPage(startPage);
		pointer.setActiveFromWorld(activeFromWorld);
		return pointer;
	}

	/**
	 * Unparse the bean to its in-game bytecode equivalent.
	 * 
	 * @param newPage Whether to set the new page flag in the generated bytecode. 
	 */
	@Override
	public byte[] unparse(final boolean newPage, final Atlas atlas) {
		return PopulationCommand.unparse(this, newPage, atlas);
	}
}
